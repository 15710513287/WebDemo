mvvm解决了什么问题
	频繁操作dom元素  视图更新不需要再写代码
	
mvvm和mvc的差异
	mvvm是数据双向绑定,数据更新时页面刷新
	mvc数据在更新时需要通过控制层来操作dom更新页面
	http://www.ruanyifeng.com/blog/2015/02/mvcmvp_mvvm.html

对前端工程化的理解
	一个符合前端工程化要求的方案应该包含以下要素:
		开发规范
		模块化开发
		组件化开发
		组件仓库
		性能优化
		部署
		开发流程
		开发工具
	为了应对在大型项目中复杂的开发、测试、部署工作
	https://juejin.im/post/58ac334e8d6d810058c103e0
对组件化的理解
	现在的前端组件不仅仅是ui组件  更多的是包含具体业务的业务组件
	但是组件要保持尽量的低耦合  一个组件功能不宜过于复杂  最好是单一功能  更易于维护
	以组件为单位，将组件相关的HTML／JS／CSS放到同一个地方。
	组件可以跨项目使用
	
性能优化的方法
	链接：https://zhuanlan.zhihu.com/p/30345077
	
	一：内容方面
		1.减少HTTP请求：合并文件、css精灵（将将一个页面涉及到的所有零星图片都包含到一张大图中）、inline Image
		2.减少DNS查询：DNS查询完成以前浏览器不能从这个主机下载任何文件。方法：DNS缓存、将资源分布到恰当的数量的主机名，平衡并行下载和DNS查询
		3.避免重定向：多余的中间访问
		4.使Ajax可以缓存
		5.非必须组件延迟加载
		6.未来所需组件预加载
		7.捡到DOM元素数量
		8.将资源放在不同的域下：浏览器同时从一个域下载资源的数目有限，增加域可以提高并行下载量
		9.减少iframe数量
		10.不要发生404等低级错误
		
	二：服务端方面
		1.使用CDN
		2.添加Expires和Cache-Control响应头
		3.对组件进行Gzip压缩
		4.配置ETag
		5.Flush Buffer Early
		6.Ajax使用GET进行请求
		7.在img标签中不要使用空的src属性
		
	三：cookie方面
		减少cookie的大小，引入的资源中不要包含cookie
		
	四：CSS方面
		1.将样式表放在页面顶部
		2.不使用CSS表达式
		3.尽量不实用@import，分配好各项的权重问题
		4.不使用IE的Filter
		
	五：JS方面
		1.将脚本放在页面底部
		2.遵循W3C标准，实行将行为，样式，结构相分离，将JS和CSS文件从外部引入
		3.压缩JS和CSS
		4.选择好的脚本，删除不必要的脚本
		5.减少DOM的访问
		6.合理设计事件监听器
		
	六：图片方面
		1.优化图片：根据实际颜色需要选择色深、压缩
		2.优化CSS精灵
		3.不要在HTML中拉伸图片
		4.保证favicon.ico小并且可以缓存
		
手机为什么不能播放rtmp视频
	rtmp协议需要在flash插件才能播放  手机端很多没有集成flash
	
em和rem的区别
	em会继承父级元素的字体大小
	rem相对的是HTML根元素
	
节流和抖动的区别
	函数节流的要点是，声明一个变量当标志位，记录当前代码是否在执行。
 	如果空闲，则可以正常触发方法执行。
 	如果代码正在执行，则取消这次方法执行，直接return。

	函数防抖  如果方法多次触发，则把上次记录的延迟执行代码用clearTimeout清掉，重新开始。
 	如果计时完毕，没有方法进来访问触发，则执行代码。
	https://www.cnblogs.com/walls/p/6399837.html
	
vue 的v-for中的key值的作用
	如果数据项的顺序被改变，Vue将不是移动 DOM 元素来匹配数据项的顺序， 而是简单复用此处每个元素，
	并且确保它在特定索引下显示已被渲染过的每个元素。
	为了给 Vue 一个提示，以便它能跟踪每个节点的身份，从而重用和重新排序现有元素，你需要为每项提供一个唯一 key 属性。
	
webpack怎么解决跨域问题
	用webpack-dev-server开发时代理，决解开发时跨域问题
	
canvas斜线的锯齿感(待测试)
	https://www.zhihu.com/question/279222232
	let width = canvas.width,height=canvas.height;
	if (window.devicePixelRatio) { //设备像素比
		canvas.style.width = width + "px";
		canvas.style.height = height + "px";
		canvas.height = height * window.devicePixelRatio;
		canvas.width = width * window.devicePixelRatio;
		ctx.scale(window.devicePixelRatio, window.devicePixelRatio);
	}
	
css left top和transform的区别
	left top在选择%计算时候，是按照父节点的长宽来位移，而transform的%是按照自身节点的宽高来位移
	